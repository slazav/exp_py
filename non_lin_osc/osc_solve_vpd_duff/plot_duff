#!/usr/bin/python3

import numpy
import math
import matplotlib.pyplot as plt

import sys
sys.path.append('..')
from non_lin_osc import *

# Test osc_solve_vdp_duff* functions

w0 = 1
tau = 5
aa = [-0.015, 0, 0.02, 0.1]
F  = 1

(fig, ax) = plt.subplots(1,2)

for a in aa:

  # go left->right or back depending on sign of a:
  if (a>=0):
    ww = numpy.linspace(0.1,2,200)
  else:
    ww = numpy.linspace(2,0.1,200)

  amp0 = numpy.zeros(ww.size)
  amp1 = numpy.zeros(ww.size)
  amp2 = numpy.zeros(ww.size)
  ph0  = numpy.zeros(ww.size)
  ph1  = numpy.zeros(ww.size)
  ph2  = numpy.zeros(ww.size)

  for i in range(ww.size):
    w = ww[i]

    # analytical solution (min branch)
    rr = osc_duff_amp(w,F,w0,tau, a)/F
    ii = numpy.argmin(abs(rr))
    amp0[i] = numpy.abs(rr[ii])
    ph0[i]  = numpy.angle(rr[ii])

    # use prefious point as initial condition:
    if i>0 or not numpy.isnan(amp1[i-1]):
      a0 = amp1[i-1]; p0=ph1[i-1]
    else:
      a0 = 0; p0 = 0;
    uv = osc_solve_vdp_duff(w0,tau,a, F,w, a0,p0)
    amp1[i] = numpy.hypot(uv[0],uv[1])/F
    ph1[i]  = numpy.arctan2(uv[1],uv[0])

    # use zero initial condition
    uv = osc_solve_vdp_duff(w0,tau,a, F,w)
    amp2[i] = numpy.hypot(uv[0],uv[1])/F
    ph2[i]  = numpy.arctan2(uv[1],uv[0])

  ax[0].plot(ww, amp1, 'r-')
  ax[0].plot(ww, amp2, 'b-')
  ax[0].plot(ww, amp0, 'k--', linewidth=0.8)

  ax[1].plot(ww, ph1, 'r-')
  ax[1].plot(ww, ph2, 'b-')
  ax[1].plot(ww, ph0, 'k--', linewidth=0.8)

ax[0].set_xlabel('frequency')
ax[1].set_xlabel('frequency')
ax[0].set_title('amplitude/drive')
ax[1].set_title('phase')
plt.legend()
plt.savefig('plot_duff.png')
